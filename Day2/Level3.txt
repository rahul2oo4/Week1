Write a LeapYear program that takes a year as input and outputs the Year is a Leap Year or not a Leap Year. 
Hint => 
The LeapYear program only works for year >= 1582, corresponding to a year in the Gregorian calendar. So ensure to check for the same. 
Further, the Leap Year is a Year divisible by 4 and not 100 unless it is divisible by 400. E.g. 1800 is not a Leap Year and 2000 is a Leap Year.
Write code having multiple if else statements based on conditions provided above and a second part having only one if statement and multiple logical 

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a year: ");
       int year = scanner.nextInt();

       if (isLeapYear(year)) {
           System.out.println(year + " is a leap year.");
       } else {
           System.out.println(year + " is not a leap year.");
       }
       scanner.close();
   }

   public static boolean isLeapYear(int year) {
       if (year % 4 == 0) {
           if (year % 100 == 0) {
               if (year % 400 == 0) {
                   return true;
               } else {
                   return false;
               }
           } else {
               return true;
           }
       } else {
           return false;
       }
   }}


Rewrite program 1 to determine Leap Year with single if condition using logical and && and or || operators

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a year: ");
       int year = scanner.nextInt();
       if((year%4==0) && (year%100==0) && (year%400==0))
       {
           System.out.println("Leap Year");
       }
       else if(year%4==0)
       {
           System.out.println("Leap Year");

       } else
       {
           System.out.println("Not Leap Year");

       }
   }
   }


Write a program to input marks and 3 subjects physics, chemistry and maths. Compute the percentage and then calculate the grade as per the following guidelines 
Hint =>
Ensure the Output clearly shows the Average Mark as well as the Grade and Remarks
Write a Program to check if the given number is a prime number or not
Hint => 
A number that can be divided exactly only by itself and 1 are Prime Numbers,
Prime Numbers checks are done for numbers greater than 1
Loop through all the numbers from 2 to the user input number and check if the reminder is zero. If the reminder is zero break out from the loop as the number is divisible by some other number and is not a prime number. 
Use the isPrime boolean variable to store the result

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a number: ");
       int n = scanner.nextInt();
       int count=0;
       for(int i=1; i<=n; i++)
       {
           if(n%i==0)
           {
               count++;
           }
       }
       if(count==2)
       {
           System.out.println("Prime number");
       }
       else {
           System.out.println("Not a Prime number");
       }
   }
   }


Create a program to check if a number is armstrong or not. Use the hints to show the steps clearly in the code
Hint => 
Armstrong Number is a number whose Sum of cubes of each digit results in the original number as in for e.g. 153 = 1^3 + 5^3 + 3^3
Get an integer input and store it in the number variable and define sum variable, initialize it to zero and originalNumber variable and assign it to input number variable
Use the while loop till the originalNumber is not equal to zero
In the while loop find each digit which is the reminder of the modulus operation number % 10. Find the cube of the number and add it to the sum variable
Again in while loop find the quotient of the number using the division operation number/10 and assign it to the original number. This removes the last digit of the original number.
Finally check if the number and the sum are the same, if same its an Armstrong number else not. So display accordingly

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a number: ");
       int n = scanner.nextInt();
       int temp = n;
       int sum=0;
       while(n>0)
       {
           sum = sum + (n%10)*(n%10)*(n%10);
           n=n/10;
       }
       if(sum==temp)
       {
           System.out.println("armstrong");
       }
       else {
           System.out.println("Not armstrong");
       }
   }}


Create a program to count the number of digits in an integer.
Hint => 
Get an integer input for the number variable.
Create an integer variable count with value 0.
Use a loop to iterate until number is not equal to 0.
Remove the last digit from number in each iteration
Increase count by 1 in each iteration.
Finally display the count to show the number of digits

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a number: ");
       int n = scanner.nextInt();
       int temp = n;
       int count=0;
       while(n>0)
       {
           n=n/10;
           count++;
       }
       System.out.println(count + " digits");
   }}



Create a program to check if a number taken from the user is a Harshad Number.
Hint => 
A Harshad number is an integer which is divisible by the sum of its digits. 
For example, 21 which is perfectly divided by 3 (sum of digits: 2 + 1).
Get an integer input for the number variable.
Create an integer variable sum with initial value 0.
Create a while loop to access each digit of the number.
Inside the loop, add each digit of the number to sum.
Check if the number is perfectly divisible by the sum.
If the number is divisible by the sum, print Harshad Number. Otherwise, print Not a Harshad Number.

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a number: ");
       int n = scanner.nextInt();
       int sum =0;
       int temp = n;
       int count=0;
       while(n>0)
       {
           sum = sum + (n%10);
           n=n/10;

       }
       if(temp%sum==0){
       System.out.println("Harshad number");}
   }}


Create a program to check if a number is an Abundant Number.
Hint => 
An abundant number is an integer in which the sum of all the divisors of the number is greater than the number itself. For example,
Divisor of 12: 1, 2, 3, 4, 6
Sum of divisor: 1 + 2 + 3 + 4 + 6 = 16 > 12
Get an integer input for the number variable.
Create an integer variable sum with initial value 0.
Run a for loop from i = 1 to i < number.
Inside the loop, check if number is divisible by i.
If true, add i to sum.
Outside the loop Check if sum is greater than number.
If the sum is greater than the number, print Abundant Number. Otherwise, print Not an Abundant Number.

import java.util.Scanner;
public class Main {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter a number: ");
       int n = scanner.nextInt();
       int sum =0;
       for(int i=1;i<n;i++)
       {
           if(n%i==0)
           {
               sum+=i;
           }
       }
       if(sum>n)
       {
           System.out.println("Abundant number");
       }
       else {
           System.out.println("Not an Abundant number");
       }
   }}


Write a program to create a calculator using switch...case.
Hint => 
Create two double variables named first and second and a String variable named op.
Get input values for all variables.
The input for the operator can only be one of the four values: "+", "-", "*" or "/".
Run a for loop from i = 1 to i < number.
Based on the input value of the op, perform specific operations using the switch...case statement and print the result.
If op is +, perform addition between first and second; if it is -, perform subtraction and so on.
If op is neither of those 4 values, print Invalid Operator.

import java.util.Scanner;
public class Calculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the first number: ");
        double first = scanner.nextDouble();
        System.out.print("Enter the operator (+, -, *, /): ");
        String op = scanner.next();
        System.out.print("Enter the second number: ");
        double second = scanner.nextDouble();
        double result;
        switch (op) {
            case "+":
                result = first + second;
                System.out.println("Result: " + result);
                break;
            case "-":
                result = first - second;
                System.out.println("Result: " + result);
                break;
            case "*":
                result = first * second;
                System.out.println("Result: " + result);
                break;
            case "/":
                if (second == 0) {
                    System.out.println("Cannot divide by zero.");
                } else {
                    result = first / second;
                    System.out.println("Result: " + result);
                }
                break;
            default:
                System.out.println("Invalid Operator");
        }
        scanner.close();
    }
}

