Create a program to find the shortest, tallest, and mean height of players present in a football team.
Hint => 
The formula to calculate the mean is: mean = sum of all elements/number of elements
Create an int array named heights of size 11 and get 3 digits random height in cms for each player in the range 150 cms to 250 cms
Write the method to Find the sum of all the elements present in the array.
Write the method to find the mean height of the players on the football team
Write the method to find the shortest height of the players on the football team 
Write the method to find the tallest height of the players on the football team
Finally display the results

import java.util.Scanner;
class Football{
 public static void main(String[] args){
   Scanner sc = new Scanner(System.in);
   int[] team = new int[11];
   int i=0;
   System.out.println("Enter the height of 11 players in (cm)");
   for(i=0;i<11;i++){
     team[i]= sc.nextInt();
   }
   smallest(team);
   largest(team);
   func_mean(team);
 }
 public static void smallest(int[] a){
   int i,temp;
   for(i=0;i<11;i++){
     if(a[i]<a[0]){
       temp = a[i];
       a[i] = a[0];
       a[0] = temp;
     }
   }
   System.out.println("The smallest in height is "+a[0]);
 }
 public static void largest(int[] a){
   int i ,temp;
   for(i=0;i<11;i++){
     if(a[i]>a[0]){
       temp = a[i];
       a[i] = a[0];
       a[0] = temp;
     }
   }
   System.out.println("The largest in height is "+a[0]);
 }
 public static void func_mean(int[] a){
   int i,sum=0;
   for(i=0;i<11;i++){
     sum=sum+a[i];
   }
   sum = sum/11;
   System.out.println("The mean height of the Football players is "+sum);
 }

}




Extend or Create a NumberChecker utility class and perform following task. Call from main() method the different methods and display results. Make sure all are static methods
Hint => 
Method to Find the count of digits in the number
Method to Store the digits of the number in a digits array
Method to Check if a number is a duck number using the digits array. A duck number is a number that has a non-zero digit present in it
Method to check if the number is a armstrong number using the digits array. ​​Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits. Eg: 153 = 1^3 + 5^3 + 3^3
Method to find the largest and second largest elements in the digits array. Use Integer.MIN_VALUE to initialize the variable.
Method to find the the smallest and second smallest elements in the digits array. Use Integer.MAX_VALUE to initialize the variable.
import java.util.Scanner;
class NumberChecker{
 public static void main(String[] args){
   Scanner sc = new Scanner(System.in);
   int number = sc.nextInt();
   int count = digit_count(number);
   duck_number(number);
   armstrong_number(number);
   min_value(number);
   max_value(number);
 }
 public static int digit_count(int number) {
   int count = 0;
   while(number > 0) {
     number = number / 10;
     count++;
   }
   System.out.println("The number of digits in the number is " + count);
   return count;
 }
 public static void duck_number(int number){
   int temp = number;
   int flag = 0;
   while(number>0){
     if(number%10==0){
       flag = 1;
       break;
     }
     number = number/10;

   }
   if(flag==1){
     System.out.println("The number is a Duck number");
   }
   else{
     System.out.println("The number is not a Duck number");
   }
 }
 public static void armstrong_number(int number){
   int temp = number;
   int sum = 0;
   while(number>0){
     int rem = number%10;
     sum = sum + rem*rem*rem;
     number = number/10;
   }
   if(sum==temp){
     System.out.println("The number is an Armstrong number");
   }
   else{
     System.out.println("The number is not an Armstrong number");
   }
 }
 public static void min_value(int number){
   int min = number%10;
   while(number>0){
     int rem = number%10;
     if(rem<min){
       min = rem;
     }
     number = number/10;
   }
   System.out.println("The smallest digit in the number is "+min);
 }
 public static void max_value(int number){
   int max = number%10;
   while(number>0){
     int rem = number%10;
     if(rem>max){
       max = rem;
     }
     number = number/10;
   }
   System.out.println("The largest digit in the number is "+max);
 }
}

Extend or Create a NumberChecker utility class and perform following task. Call from main() method the different methods and display results. Make sure all are static methods
Hint => 
Method to find the count of digits in the number and a Method to Store the digits of the number in a digits array
Method to find the sum of the digits of a number using the digits array
Method to find the sum of the squares of the digits of a number using the digits array. Use Math.pow() method
Method to Check if a number is a harshad number using a digits array. A number is called a Harshad number if it is divisible by the sum of its digits. For e.g. 21
Method to find the frequency of each digit in the number. Create a 2D array to store the frequency with digit in the first column and frequency in the second column.


public class Number_checker {
   public static int countDigits(int number) {
       return String.valueOf(number).length();
   }
   public static int[] storeDigits(int number) {
       String numStr = String.valueOf(number);
       int[] digits = new int[numStr.length()];
       for (int i = 0; i < numStr.length(); i++) {
           digits[i] = Character.getNumericValue(numStr.charAt(i));
       }
       return digits;
   }

   public static int sumOfDigits(int[] digits) {
       int sum = 0;
       for (int digit : digits) {
           sum += digit;
       }
       return sum;
   }

   public static int sumOfSquaresOfDigits(int[] digits) {
       int sum = 0;
       for (int digit : digits) {
           sum += Math.pow(digit, 2);
       }
       return sum;
   }

   public static boolean isHarshadNumber(int number, int[] digits) {
       int sum = sumOfDigits(digits);
       return number % sum == 0;
   }

   public static int[][] digitFrequency(int number) {
       int[] digits = storeDigits(number);
       int[][] frequency = new int[10][2];
       for (int i = 0; i < 10; i++) {
           frequency[i][0] = i;
       }
       for (int digit : digits) {
           frequency[digit][1]++;
       }
       return frequency;
   }

   public static void main(String[] args) {
       int number = 21;
       int digitCount = countDigits(number);
       int[] digits = storeDigits(number);
       int sum = sumOfDigits(digits);
       int sumOfSquares = sumOfSquaresOfDigits(digits);
       boolean isHarshad = isHarshadNumber(number, digits);
       int[][] frequency = digitFrequency(number);

       System.out.println("Count of digits: " + digitCount);
       System.out.println("Sum of digits: " + sum);
       System.out.println("Sum of squares of digits: " + sumOfSquares);
       System.out.println("Is Harshad Number: " + isHarshad);
       System.out.println("Digit Frequency:");
       for (int[] freq : frequency) {
           if (freq[1] > 0) {
               System.out.println("Digit " + freq[0] + ": " + freq[1]);
           }
       }
   }
}


Extend or Create a NumberChecker utility class and perform following task. Call from main() method the different methods and display results. Make sure all are static methods
Hint => 
Method to find the count of digits in the number and a Method to Store the digits of the number in a digits array
Method to reverse the digits array 
Method to compare two arrays and check if they are equal
Method to check if a number is a palindrome using the Digits. A palindrome number is a number that remains the same when its digits are reversed. 
Method to Check if a number is a duck number using the digits array. A duck number is a number that has a non-zero digit present in it
import java.util.Arrays;

public class NumberChecker {

   public static int countDigits(int number) {
       return String.valueOf(number).length();
   }

   public static int[] storeDigits(int number) {
       String numStr = String.valueOf(number);
       int[] digits = new int[numStr.length()];
       for (int i = 0; i < numStr.length(); i++) {
           digits[i] = Character.getNumericValue(numStr.charAt(i));
       }
       return digits;
   }

   public static int[] reverseDigitsArray(int[] digits) {
       int[] reversed = new int[digits.length];
       for (int i = 0; i < digits.length; i++) {
           reversed[i] = digits[digits.length - 1 - i];
       }
       return reversed;
   }

   public static boolean compareArrays(int[] array1, int[] array2) {
       return Arrays.equals(array1, array2);
   }

   public static boolean isPalindrome(int number) {
       int[] digits = storeDigits(number);
       int[] reversed = reverseDigitsArray(digits);
       return compareArrays(digits, reversed);
   }

   public static boolean isDuckNumber(int number) {
       int[] digits = storeDigits(number);
       for (int digit : digits) {
           if (digit == 0) {
               return true;
           }
       }
       return false;
   }

   public static void main(String[] args) {
       int number = 12321;
       System.out.println("Count of digits: " + countDigits(number));
       System.out.println("Digits array: " + Arrays.toString(storeDigits(number)));
       System.out.println("Reversed digits array: " + Arrays.toString(reverseDigitsArray(storeDigits(number))));
       System.out.println("Is palindrome: " + isPalindrome(number));
       System.out.println("Is duck number: " + isDuckNumber(number));
   }
}

Extend or Create a NumberChecker utility class and perform following task. Call from main() method the different methods and display results. Make sure all are static methods
Hint => 
Method to Check if a number is prime number. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. 
Method to Check if a number is a neon number. A neon number is a number where the sum of digits of the square of the number is equal to the number itself 
Method to Check if a number is a spy number. A number is called a spy number if the sum of its digits is equal to the product of its digits
Method to Check if a number is an automorphic number. An automorphic number is a number whose square ends with the number itself. E.g. 5 is an automorphic number
Method to Check if a number is a buzz number. A buzz number is a number that is either divisible by 7 or ends with 7
public class Number_four {

   public static void main(String[] args) {
       int number = 7;

       System.out.println("Is " + number + " a prime number? " + NumberChecker.isPrime(number));
       System.out.println("Is " + number + " a neon number? " + NumberChecker.isNeon(number));
       System.out.println("Is " + number + " a spy number? " + NumberChecker.isSpy(number));
       System.out.println("Is " + number + " an automorphic number? " + NumberChecker.isAutomorphic(number));
       System.out.println("Is " + number + " a buzz number? " + NumberChecker.isBuzz(number));
   }
}

class NumberChecker {

   public static boolean isPrime(int number) {
       if (number <= 1) return false;
       for (int i = 2; i <= Math.sqrt(number); i++) {
           if (number % i == 0) return false;
       }
       return true;
   }

   public static boolean isNeon(int number) {
       int square = number * number;
       int sumOfDigits = 0;
       while (square > 0) {
           sumOfDigits += square % 10;
           square /= 10;
       }
       return sumOfDigits == number;
   }

   public static boolean isSpy(int number) {
       int sum = 0, product = 1;
       while (number > 0) {
           int digit = number % 10;
           sum += digit;
           product *= digit;
           number /= 10;
       }
       return sum == product;
   }

   public static boolean isAutomorphic(int number) {
       int square = number * number;
       return String.valueOf(square).endsWith(String.valueOf(number));
   }

   public static boolean isBuzz(int number) {
       return number % 7 == 0 || number % 10 == 7;
   }
}

Extend or Create a NumberChecker utility class and perform following task. Call from main() method the different methods and display results. Make sure all are static methods
Hint => 
Method to find factors of a number and return them as an array. Note there are 2 for loops one for the count and another for finding the factor and storing in the array
Method to find the greates factor of a Number using the factors array
Method to find the sum of the factors using factors array and return the sum
Method to find the product of the factors using factors array and return the product
Method to find product of cube of the factors using the factors array. Use Math.pow() 
Method to Check if a number is a perfect number. Perfect numbers are positive integers that are equal to the sum of their proper divisors
Method to find the number is a abundant number. A number is called an abundant number if the sum of its proper divisors is greater than the number itself
Method to find the number is a deficient number. A number is called a deficient number if the sum of its proper divisors is less than the number itself
Method to Check if a number is a strong number. A number is called a strong number if the sum of the factorial of its digits is equal to the number itself


import java.util.ArrayList;
public class NumberChecker {
   public static int[] findFactors(int number) {
       ArrayList<Integer> factors = new ArrayList<>();
       for (int i = 1; i <= number; i++) {
           if (number % i == 0) {
               factors.add(i);
           }
       }
       int[] result = new int[factors.size()];
       for (int i = 0; i < factors.size(); i++) {
           result[i] = factors.get(i);
       }
       return result;
   }

   public static int findGreatestFactor(int number) {
       int[] factors = findFactors(number);
       return factors[factors.length - 2];
   }

   public static int sumOfFactors(int number) {
       int[] factors = findFactors(number);
       int sum = 0;
       for (int factor : factors) {
           sum += factor;
       }
       return sum;
   }

   public static int productOfFactors(int number) {
       int[] factors = findFactors(number);
       int product = 1;
       for (int factor : factors) {
           product *= factor;
       }
       return product;
   }

   public static double productOfCubeOfFactors(int number) {
       int[] factors = findFactors(number);
       double product = 1;
       for (int factor : factors) {
           product *= Math.pow(factor, 3);
       }
       return product;
   }

   public static boolean isPerfectNumber(int number) {
       int[] factors = findFactors(number);
       int sum = 0;
       for (int i = 0; i < factors.length - 1; i++) {
           sum += factors[i];
       }
       return sum == number;
   }

   public static boolean isAbundantNumber(int number) {
       int[] factors = findFactors(number);
       int sum = 0;
       for (int i = 0; i < factors.length - 1; i++) {
           sum += factors[i];
       }
       return sum > number;
   }

   public static boolean isDeficientNumber(int number) {
       int[] factors = findFactors(number);
       int sum = 0;
       for (int i = 0; i < factors.length - 1; i++) {
           sum += factors[i];
       }
       return sum < number;
   }

   public static boolean isStrongNumber(int number) {
       int temp = number;
       int sum = 0;
       while (temp > 0) {
           int digit = temp % 10;
           sum += factorial(digit);
           temp /= 10;
       }
       return sum == number;
   }

   private static int factorial(int num) {
       int fact = 1;
       for (int i = 1; i <= num; i++) {
           fact *= i;
       }
       return fact;
   }

   public static void main(String[] args) {
       int number = 28;

       int[] factors = findFactors(number);
       System.out.print("Factors: ");
       for (int factor : factors) {
           System.out.print(factor + " ");
       }
       System.out.println();

       System.out.println("Greatest Factor: " + findGreatestFactor(number));
       System.out.println("Sum of Factors: " + sumOfFactors(number));
       System.out.println("Product of Factors: " + productOfFactors(number));
       System.out.println("Product of Cube of Factors: " + productOfCubeOfFactors(number));
       System.out.println("Is Perfect Number: " + isPerfectNumber(number));
       System.out.println("Is Abundant Number: " + isAbundantNumber(number));
       System.out.println("Is Deficient Number: " + isDeficientNumber(number));
       System.out.println("Is Strong Number: " + isStrongNumber(number));
   }
}


Write a program to generate a six-digit OTP number using Math.random() method. Validate the numbers are unique by generating the OTP number 10 times and ensuring all the 10 OTPs are not the same
Hint => 
Write a method to Generate a 6-digit OTP number using Math.random() 
Create an array to save the OTP numbers generated 10 times
Write a method to ensure that the OTP numbers generated are unique. If unique return true else return false


public class Otp {
   public static void main(String[] args) {
       String[] otps = new String[10];
       for (int i = 0; i < 10; i++) {
           otps[i] = generateOtp();
       }
       System.out.println(areOtpsUnique(otps));
   }

   public static String generateOtp() {
       int otp = (int) (Math.random() * 900000) + 100000;
       return String.valueOf(otp);
   }

   public static boolean areOtpsUnique(String[] otps) {
       for (int i = 0; i < otps.length; i++) {
           for (int j = i + 1; j < otps.length; j++) {
               if (otps[i].equals(otps[j])) {
                   return false;
               }
           }
       }
       return true;
   }
}





Create a program to display a calendar for a given month and year. The program should take the month and year as input from the user and display the calendar for that month. E.g. for 07 2005 user input, the program should display the calendar as shown below

Hint => 
Write a Method to get the name of the month. For this define a month Array to store the names of the months
Write a Method to get the number of days in the month. For this define a days Array to store the number of days in each month. For Feb month, check for Leap Year to get the number of days. Also, define a Leap Year Method. 
Write a method to get the first day of the month using the Gregorian calendar algorithm
y0 = y − (14 − m) / 12
x = y0 + y0/4 − y0/100 + y0/400
m0 = m + 12 × ((14 − m) / 12) − 2
d0 = (d + x + 31m0 / 12) mod 7
Displaying the Calendar requires 2 for loops. 
The first for loop up to the first day to get the proper indentation. As in the example above 3 spaces from Sun to Thu as to be set as July 1st starts on Fri
The Second for loop Displays the days of the month starting from 1 to the number of days. Add proper indentation for single-digit days using %3d to display the integer right-justified in a field of width 3. Please note to move to the next line after Sat


import java.util.Scanner;
public class Calender {
   static String[] months = {
       "January", "February", "March", "April", "May", "June",
       "July", "August", "September", "October", "November", "December"
   };

   static int[] days = {
       31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   };

   static boolean isLeapYear(int year) {
       return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   }

   static int getDaysInMonth(int month, int year) {
       if (month == 2 && isLeapYear(year)) {
           return 29;
       }
       return days[month - 1];
   }

   static int getFirstDayOfMonth(int month, int year) {
       int y = year - (14 - month) / 12;
       int x = y + y / 4 - y / 100 + y / 400;
       int m = month + 12 * ((14 - month) / 12) - 2;
       return (1 + x + (31 * m) / 12) % 7;
   }

   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       int month = scanner.nextInt();
       int year = scanner.nextInt();
       scanner.close();

       System.out.println("   " + months[month - 1] + " " + year);
       System.out.println(" S  M  T  W  T  F  S");

       int firstDay = getFirstDayOfMonth(month, year);
       int daysInMonth = getDaysInMonth(month, year);

       for (int i = 0; i < firstDay; i++) {
           System.out.print("   ");
       }

       for (int day = 1; day <= daysInMonth; day++) {
           System.out.printf("%3d", day);
           if ((day + firstDay) % 7 == 0) {
               System.out.println();
           }
       }
       System.out.println();
   }
}


Write a program Euclidean distance between two points as well as the equation of the line using those two points. Use Math functions Math.pow() and Math.sqrt()
Hint => 
Take inputs for 2 points x1, y1, and x2, y2 
Method to find the Euclidean distance between two points and return the distance
distance = (x2-x1)2 +(y2-y1)2 
Write a Method to find the equation of a line given two points and return the equation which includes the slope and the y-intercept
The equation of a line is given by the equation y = m*x + b Where m is the slope and b is the y-intercept. So firstly compute the slope using the formulae 
m = (y2 - y1)/(x2 - x1)
Post that compute the y-intercept b using the formulae 
b = y1 - m*x1  
Finally, return an array having slope m and y-intercept b 

import java.util.Scanner;
class Distance{
   public static void main(String[] args){
       Scanner scanner = new Scanner(System.in);
       System.out.println("Enter the value of x1");
       int x1 = scanner.nextInt();
       System.out.println("Enter the value of y1");
       int y1 = scanner.nextInt();
       System.out.println("Enter the value of x2");
       int x2 = scanner.nextInt();
       System.out.println("Enter the value of y2");
       int y2 = scanner.nextInt();
       scanner.close();
       double distance = findDistance(x1, y1, x2, y2);
       System.out.println("The distance between the two points is: " + distance);
       double[] equation = findEquation(x1, y1, x2, y2);
       System.out.println("The equation of the line is: y = " + equation[0] + "x + " + equation[1]);
   }
   public static double findDistance(int x1, int y1, int x2, int y2){
       return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
   }
   public static double[] findEquation(int x1, int y1, int x2, int y2){
       double[] equation = new double[2];
       equation[0] = (y2 - y1) / (x2 - x1);
       equation[1] = y1 - equation[0] * x1;
       return equation;
   }
}



Write a program to find the 3 points that are collinear using the slope formulae and area of triangle formulae. check  A (2, 4), B (4, 6) and C (6, 8) are Collinear for sampling. 
Hint => 
Take inputs for 3 points x1, y1, x2, y2, and x3, y3
Write a Method to find the 3 points that are collinear using the slope formula. The 3 points A(x1,y1), b(x2,y2), and c(x3,y3) are collinear if the slopes formed by 3 points ab, bc, and cd are equal. 
slope AB = (y2 - y1)/(x2 - x1), slope BC = (y3 - y2)/(x3 - x3)
slope AC = (y3 - y1)/(x3 - x1) Points are collinear if
slope AB = slope BC = slope Ac
The method to find the three points is collinear using the area of the triangle formula. The Three points are collinear if the area of the triangle formed by three points is 0. The area of a triangle is 
area = 0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))

import java.util.Scanner;
public class Collinear {

   public static boolean areCollinearUsingSlope(int x1, int y1, int x2, int y2, int x3, int y3) {
       double slopeAB = (double) (y2 - y1) / (x2 - x1);
       double slopeBC = (double) (y3 - y2) / (x3 - x2);
       double slopeAC = (double) (y3 - y1) / (x3 - x1);
       return slopeAB == slopeBC && slopeBC == slopeAC;
   }

   public static boolean areCollinearUsingArea(int x1, int y1, int x2, int y2, int x3, int y3) {
       double area = 0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));
       return area == 0;
   }

   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       int x1 = scanner.nextInt();
       int y1 = scanner.nextInt();
       int x2 = scanner.nextInt();
       int y2 = scanner.nextInt();
       int x3 = scanner.nextInt();
       int y3 = scanner.nextInt();
       boolean collinearSlope = areCollinearUsingSlope(x1, y1, x2, y2, x3, y3);
       boolean collinearArea = areCollinearUsingArea(x1, y1, x2, y2, x3, y3);
       System.out.println("Collinear using slope: " + collinearSlope);
       System.out.println("Collinear using area: " + collinearArea);
   }
}


Create a program to find the bonus of 10 employees based on their years of service as well as the total bonus amount the 10-year-old company Zara has to pay as a bonus, along with the old and new salary.
Hint => 
Zara decides to give a bonus of 5% to employees whose year of service is more than 5 years or 2% if less than 5 years
Create a Method to determine the Salary and years of service and return the same. Use the Math.random() method to determine the 5-digit salary for each employee and also use the random method to determine the years of service. Define 2D Array to save the salary and years of service.
Write a Method to calculate the new salary and bonus based on the logic defined above and return the new 2D Array of the latest salary and bonus amount 
Write a Method to Calculate the sum of the Old Salary, the Sum of the New Salary, and the Total Bonus Amount and display it in a Tabular Format


import java.util.Random;
public class Emp_sal {
   public static void main(String[] args) {
       int[][] employeeData = generateEmployeeData(10);
       double[][] updatedData = calculateBonusAndNewSalary(employeeData);
       displaySummary(employeeData, updatedData);
   }

   public static int[][] generateEmployeeData(int numEmployees) {
       Random random = new Random();
       int[][] data = new int[numEmployees][2];
       for (int i = 0; i < numEmployees; i++) {
           data[i][0] = 10000 + random.nextInt(90000);
           data[i][1] = random.nextInt(11);
       }
       return data;
   }

   public static double[][] calculateBonusAndNewSalary(int[][] employeeData) {
       double[][] updatedData = new double[employeeData.length][2];
       for (int i = 0; i < employeeData.length; i++) {
           int salary = employeeData[i][0];
           int yearsOfService = employeeData[i][1];
           double bonusPercentage = yearsOfService > 5 ? 0.05 : 0.02;
           double bonus = salary * bonusPercentage;
           updatedData[i][0] = salary + bonus;
           updatedData[i][1] = bonus;
       }
       return updatedData;
   }

   public static void displaySummary(int[][] employeeData, double[][] updatedData) {
       double totalOldSalary = 0, totalNewSalary = 0, totalBonus = 0;
       System.out.printf("%-10s %-15s %-15s %-15s %-15s\n", "Emp ID", "Old Salary", "Years of Service", "New Salary", "Bonus");
       for (int i = 0; i < employeeData.length; i++) {
           int oldSalary = employeeData[i][0];
           int yearsOfService = employeeData[i][1];
           double newSalary = updatedData[i][0];
           double bonus = updatedData[i][1];
           totalOldSalary += oldSalary;
           totalNewSalary += newSalary;
           totalBonus += bonus;
           System.out.printf("%-10d %-15d %-15d %-15.2f %-15.2f\n", i + 1, oldSalary, yearsOfService, newSalary, bonus);
       }
       System.out.println("---------------------------------------------------------------");
       System.out.printf("%-25s %-15.2f\n", "Total Old Salary:", totalOldSalary);
       System.out.printf("%-25s %-15.2f\n", "Total New Salary:", totalNewSalary);
       System.out.printf("%-25s %-15.2f\n", "Total Bonus Amount:", totalBonus);
   }
}


Create a program to take input marks of students in 3 subjects physics, chemistry, and maths. Compute the total, average, and the percentage score 
Hint => 
Take input for the number of students
Write a method to generate random 2-digit scores for Physics, Chemistry, and Math (PCM) for the students and return the scores. This method returns a 2D array with PCM scores for all students
Write a Method to calculate the total, average, and percentages for each student and return a 2D array with the corresponding values. Please ensure to round off the values to 2 Digits using the Math.round() method. 
Finally, write a Method to display the scorecard of all students with their scores, total, average, and percentage in a tabular format using "\t". 


import java.util.Scanner;
import java.util.Random;
public class GRades {
   public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       System.out.print("Enter the number of students: ");
       int numStudents = scanner.nextInt();

       int[][] scores = generateScores(numStudents);
       double[][] results = calculateResults(scores);
       displayScorecard(scores, results);
   }

   public static int[][] generateScores(int numStudents) {
       Random random = new Random();
       int[][] scores = new int[numStudents][3];
       for (int i = 0; i < numStudents; i++) {
           scores[i][0] = 10 + random.nextInt(90);
           scores[i][1] = 10 + random.nextInt(90);
           scores[i][2] = 10 + random.nextInt(90);
       }
       return scores;
   }

   public static double[][] calculateResults(int[][] scores) {
       double[][] results = new double[scores.length][3];
       for (int i = 0; i < scores.length; i++) {
           int total = scores[i][0] + scores[i][1] + scores[i][2];
           double average = total / 3.0;
           double percentage = (total / 300.0) * 100;
           results[i][0] = total;
           results[i][1] = Math.round(average * 100.0) / 100.0;
           results[i][2] = Math.round(percentage * 100.0) / 100.0;
       }
       return results;
   }

   public static void displayScorecard(int[][] scores, double[][] results) {
       System.out.println("Student\tPhysics\tChemistry\tMaths\tTotal\tAverage\tPercentage");
       for (int i = 0; i < scores.length; i++) {
           System.out.println((i + 1) + "\t" + scores[i][0] + "\t" + scores[i][1] + "\t\t" + scores[i][2] + "\t" +
                   (int) results[i][0] + "\t" + results[i][1] + "\t" + results[i][2]);
       }
   }
}


